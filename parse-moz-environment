#! /usr/bin/env node
/**
 * @file        parse-moz-environment
 *              Parse the output from the ./mach environment --format=json command into something we can
 *              use from the PythonMonkey setup.sh script.
 *
 *              Usage: parse-moz-environment <path to mozilla repo>
 *
 * @author      Wes Garland, wes@distributive.network
 * @date        July 2023
 */

const process = require('process');
const path    = require('path');
const fs      = require('fs');
const os      = require('os');

const { spawnSync } = require('child_process');

const mozRepo = process.argv[2];
var solibExtRe;

process.on('unhandledRejection', (error) => {
  console.error(error.message);
  process.exit(1);
});

switch(os.type())
{
  case 'win32':
    solibExtRe = '(dll|lib)';
    break;
  case 'Darwin':
    solibExtRe = 'dylib';
    break;
  default:
    solibExtRe = 'so';
    break;
}

const child = spawnSync(
  path.resolve(mozRepo, 'mach'),
  [ 'environment', '--format=json' ],
  { env: process.env },
);

const machenv = JSON.parse(child.stdout.toString('utf-8'));
if (process.stdout.isTTY)
  console.log(machenv);
if (machenv.mozconfig.configure_args.indexOf('--enable-project=js') == -1)
  console.warn(`Warning: SpiderMonkey build was not explicitly enabled in ${mozRepo} - this build may not work`);

var libmozjs;
const re = new RegExp('^libmozjs(-[0-9a-z-]+)?\.' + solibExtRe + '$');
const objDir = machenv.topobjdir;
const solibDir = path.resolve(objDir, 'dist', 'bin');
const dents = fs.readdirSync(solibDir);
for (let i=0; i < dents.length; i++)
{
  if (re.test(dents[i]))
  {
    libmozjs = dents[i];
    break;
  }
}

if (!libmozjs)
  throw new Error(`Could not locate libmozjs library in ${solibDir}`);

const USER = process.env.SUDO_USER || process.env.USER || process.env.LOGNAME || os.userInfo().uesrname;
const outputFile = path.resolve('./cmake/modules', 'SpiderMonkeySetup.cmake');

fs.writeFileSync(outputFile, `\
### This is an automatically-generated file. DO NOT HAND-EDIT! ###
#
# Generated by ${USER}@${os.hostname} on ${Date()} via
# ${process.argv.map((arg) => '"' + arg + '"').join(' ')}
#
set(ENV{MOZCONFIG} ${process.env.MOZCONFIG || machenv.mozconfig.path || ''})
set(MOZILLA ${mozRepo})
set(LIBMOZJS ${libmozjs})
set(LIBMOZJS_ORIGIN_PATH ${path.resolve(objDir, 'dist', 'bin', libmozjs)})
set(LIBMOZJS_VERSION ${libmozjs.replace(/^(libmozjs)(-)([0-9a-z-]+)*/, '$3').replace(/\.[dysolib]+$/, '')})
set(LIBMOZJS_INCLUDE ${path.resolve(objDir, 'dist', 'include')})
`);

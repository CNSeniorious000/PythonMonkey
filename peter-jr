#! /bin/bash
#
# @file         peter-js
#               A simple test framework in the spirit of Peter (npmjs.com/packages/peter) for testing
#               basic PythonMonkey functionality.
# @author       Wes Garland, wes@distributive.network
# @date         Jun 2023
#
runDir=`pwd`
cd `dirname "$0"`
topDir=`pwd`
cd "$runDir"

set -u
set -o pipefail

if [ "${1:-}" = "-v" ]; then
  VERBOSE=1
  shift
else
  VERBOSE="${VERBOSE:-}"
fi

[ "${1:-}" ] || set "${topDir}/tests/js"
testLocations="$@"

function panic()
{
  echo "PANIC: $*" >&2
  exit 2
}

TMP=`mktemp -d`
([ "${TMP}" ] && [ -d "${TMP}" ]) || exit 3

trap "rm -r \"${TMP}\"" EXIT

if [ "$VERBOSE" ]; then
  stdout="/dev/stdout"
  stderr="/dev/stderr"
else
  stdout="$TMP/stdout"
  stderr="$TMP/stderr"
fi

red()
{
  printf "\e[0;31m%s\e[0m" "$*"
}

green()
{
  printf "\e[0;32m%s\e[0m" "$*"
}

(
  for loc in "${testLocations[@]}"
  do
    find $(realpath "$loc") -type f -name \*.simple
    find $(realpath "$loc") -type f -name \*.bash
  done
) \
| while read file
  do
    sfile=$(realpath --relative-to="${runDir}" "${file}")
    printf 'Testing %-40s ... ' "${sfile})"
    ext="${file##*.}"
    (
      case "$ext" in
        "simple")
          ./js-test-runner "$file"
          exitCode="$?"
          ;;
        "bash")
          bash "$file"
          exitCode="$?"
          ;;
        *)
          echo
          panic "${file}: invalid extension '$ext'"
          ;;
      esac

      exit "$exitCode"
    )> $stdout 2>$stderr
    exitCode="$?"

    if [ "$exitCode" = "0" ]; then
      echo "$(green PASS)"
    else
      echo "$(red FAIL)"
      if [ ! "$VERBOSE" ]; then
        echo "-- ${file} vvvvvvvvvvvvvv"
        cat "$stderr" | sed 's/^/   /'
        [ "$stderr" = "$stdout" ] || cat "$stderr" | sed 's/^/   /'
        echo "-- ${file} ^^^^^^^^^^^^^^"
        echo
      fi
    fi
    [ "$VERBOSE" ] || cat "$stderr"
  done
